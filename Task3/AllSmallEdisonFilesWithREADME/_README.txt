Dear Teams,

In this directory, you have the 14 programs retained for the final release of your project.

I have removed f5.se because its program size was greater than 256 bytes.
The program f6.se is working fine. Its binary has several -1 which was stopping the 
loading of the program if you test -1 as an end the program. A "-1" in a program could
be a negative offset or a constant value. Some teams were not taking care of the VM stack
(see the memory map below).

I recompiled and executed all the 14 programs (see below). The compiler generates 3 files:
1) A .txt file which is similar to an assembly (.asm) source file of the VM instructions generated. 
2) A .pic file which is a binary file in ASCII format (in strings).
3) A .bin file which is a "real" binary file in a non-printable format (in bytes).
   Each byte is of type "uint8_t". The first byte of a .bin file represents the
   size of the program (from 0 up to 255). As I said all 14 programs are less than 256,
   so they will all fit.

Why offer a new format .bin file? I completely forgot that the C# Host Loader that
I wrote was reading a binary file, not a pic file. Sorry, my mistake. So instead of
asking you to take care of that transformation from .pic to .bin, I found it easier
to generate them myself via the compiler a .bin file.

The original .pic file had all opcodes greater than 400 in decimal. I did that to
recognize more easily opcodes which is the beginning of every instruction. This
forces us to use an array of "uint16_t" to load the code in the VM memory array.
It also doubles the size of programs. That is the reason why in the virtual machine
code 'SmallEdisonVM_LoadTodo.cpp' line 183:

            switch((opcode=memory[ip++])-INSTR_TABLE) {

I am substracting INSTR_TABLE, which represents 400 (see line 133, const int INSTR_TABLE = 400;).


With the new .pic file that I have regenerated, just change INSTR_TABLE to 0,
and everything will work fine. You can also use an array of "uint8_t" to load 
the code in the VM memory array. All programs will be half of the original size.

One last thing, many of you were not able to run f6.pic or f6.bin. The problem is probably
your stack allocation on the VM. Here is a suggested memory map:

+-----------------------+ 1280 <----- MAX_ADDRESS (1024 + 256)      
|     program code      |
+-----------------------+ 1024 <----- ip     
|     program stack     |
|                       | 0004 <----- sp
+-----------------------+ 0000 <----- base address of a memory (uint8_t* memory)

You load your program starting at 1024 and run it at 1024.


With all the above done, Task 5 will be faster to achieve. The C# loader program will read a '.bin' 
in one packet large enough to load all programs in one shot. So, you don't need to load
the program receiving multiple packets on the target side.

In summary, if you have done everything properly (Tasks 4 and 5) with a good design/code quality, 
and they are working. You can give me a full demo during my office hours this coming Friday.

I will upload the new C# host loader with a larger packet today.

Best Regards,
Dr. de Champlain
   

Compiling 'f0.se'...
Generating 'f0.txt' (similar to a .asm file)...
Generating 'f0.pic' (binary file in strings)...
Generating 'f0.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 38 bytes.
Here is a decimal dump:
38 43 1 1 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 48 74 76 6 48 74 76 6 0 73 76 15 12 -1

Compiling 'f1.se'...
Generating 'f1.txt' (similar to a .asm file)...
Generating 'f1.pic' (binary file in strings)...
Generating 'f1.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 42 bytes.
Here is a decimal dump:
42 43 0 1 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 49 74 76 6 48 74 76 25 0 49 5 48 1 73 76 15 12 -1

Compiling 'f2.se'...
Generating 'f2.txt' (similar to a .asm file)...
Generating 'f2.pic' (binary file in strings)...
Generating 'f2.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 108 bytes.
Here is a decimal dump:
108 43 0 2 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 50 74 76 6 50 74 6 51 74 6 53 74 6 48 74 76 25 0 49 5 6 2 3 1 25 0 49 6 25 0 49 5 48 1 6 1 0 0 3 1 25 0 49 5 48 1 73 25 0 49 5 48 1 6 1 0 0 73 25 0 49 6 48 1 6 2 0 0 73 25 0 49 5 48 1 6 2 30 0 73 76 15 12 -1

Compiling 'f3.se'...
Generating 'f3.txt' (similar to a .asm file)...
Generating 'f3.pic' (binary file in strings)...
Generating 'f3.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 68 bytes.
Here is a decimal dump:
68 43 0 1 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 51 74 76 6 0 75 6 1 75 76 25 0 49 5 6 0 3 1 25 0 49 5 48 1 75 25 0 49 5 6 1 3 1 25 0 49 5 48 1 75 76 15 12 -1

Compiling 'f4.se'...
Generating 'f4.txt' (similar to a .asm file)...
Generating 'f4.pic' (binary file in strings)...
Generating 'f4.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 225 bytes.
Here is a decimal dump:
-31 43 0 2 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 52 74 76 6 15 73 6 15 29 0 73 6 0 73 6 1 75 6 0 75 6 1 75 6 0 75 6 1 75 76 25 0 49 5 6 3 6 4 31 0 6 6 6 2 9 0 0 0 3 1 25 0 49 5 48 1 73 25 0 49 5 48 1 29 0 73 25 0 49 5 48 1 6 3 30 0 73 25 0 49 6 6 1 6 2 17 1 33 3 1 25 0 49 6 48 1 75 25 0 49 6 6 1 6 2 17 1 3 1 25 0 49 6 48 1 75 25 0 49 6 6 0 6 3 34 1 3 1 25 0 49 6 48 1 75 25 0 49 6 6 1 6 2 17 1 6 0 6 3 34 1 2 3 1 25 0 49 6 48 1 75 25 0 49 6 6 4 6 5 27 6 6 6 7 35 2 6 8 6 9 22 6 10 6 11 36 2 37 3 1 25 0 49 6 48 1 75 76 15 12 -1

Compiling 'f6.se'...
Generating 'f6.txt' (similar to a .asm file)...
Generating 'f6.pic' (binary file in strings)...
Generating 'f6.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 106 bytes.
Here is a decimal dump:
106 43 0 1 0 0 21 20 43 0 0 0 0 25 0 49 -1 25 1 49 5 48 1 3 1 15 21 20 43 1 0 0 0 25 1 49 5 25 0 49 -1 48 1 3 1 15 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 102 74 6 54 74 76 6 1 73 6 2 73 76 25 0 49 5 6 1 3 1 47 1 25 0 42 -79 73 6 2 25 0 42 -66 47 1 25 0 42 -92 73 76 15 12 -1

Compiling 'a0.se'...
Generating 'a0.txt' (similar to a .asm file)...
Generating 'a0.pic' (binary file in strings)...
Generating 'a0.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 174 bytes.
Here is a decimal dump:
-82 43 0 16 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 97 74 6 48 74 76 6 52 74 6 48 74 6 49 74 6 56 74 6 48 74 6 49 74 6 56 74 76 6 4 73 25 0 49 13 6 1 24 1 8 1 0 48 1 73 25 0 49 13 6 1 24 1 8 1 0 6 1 3 1 25 0 49 13 6 1 24 1 8 1 0 48 1 73 6 8 73 25 0 49 5 6 1 24 1 8 1 0 48 1 73 25 0 49 5 6 1 24 1 8 1 0 6 1 3 1 25 0 49 5 6 1 24 1 8 1 0 48 1 73 25 0 49 5 6 8 24 1 8 1 0 6 8 3 1 25 0 49 5 6 8 24 1 8 1 0 48 1 73 76 15 12 -1

Compiling 'a1.se'...
Generating 'a1.txt' (similar to a .asm file)...
Generating 'a1.pic' (binary file in strings)...
Generating 'a1.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 123 bytes.
Here is a decimal dump:
123 43 0 3 0 0 21 37 43 0 0 0 0 25 1 49 5 6 0 24 0 2 1 0 48 1 74 25 1 49 5 6 1 24 0 2 1 0 48 1 74 76 15 25 0 49 5 6 0 24 0 2 1 0 6 65 3 1 25 0 49 5 6 1 24 0 2 1 0 6 35 3 1 25 0 49 5 6 2 24 0 2 1 0 6 0 3 1 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 97 74 6 49 74 76 6 65 74 6 35 74 76 25 0 42 -111 15 12 -1

Compiling 'a2.se'...
Generating 'a2.txt' (similar to a .asm file)...
Generating 'a2.pic' (binary file in strings)...
Generating 'a2.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 135 bytes.
Here is a decimal dump:
-121 43 0 3 0 0 21 70 43 0 1 0 0 25 0 49 5 6 1 3 1 6 91 74 25 0 49 5 48 1 6 3 35 10 38 25 1 49 5 25 0 49 5 48 1 24 1 3 1 0 48 1 75 25 0 49 5 25 0 49 5 48 1 6 1 0 0 3 1 11 -45 6 93 74 76 15 25 0 49 5 6 2 24 1 3 1 0 6 1 3 1 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 97 74 6 50 74 76 6 91 74 6 0 75 6 1 75 6 0 75 6 93 74 76 25 0 42 -123 15 12 -1

Compiling 'a3.se'...
Generating 'a3.txt' (similar to a .asm file)...
Generating 'a3.pic' (binary file in strings)...
Generating 'a3.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 217 bytes.
Here is a decimal dump:
-39 43 0 12 0 0 25 0 49 11 6 1 6 65 3 2 25 0 49 13 6 2 6 66 3 2 25 0 49 15 6 3 6 67 3 2 25 0 49 5 6 1 24 1 3 2 0 25 0 49 11 48 2 3 2 25 0 49 5 6 2 24 1 3 2 0 25 0 49 13 48 2 3 2 25 0 49 5 6 3 24 1 3 2 0 25 0 49 15 48 2 3 2 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 97 74 6 51 74 76 6 3 73 6 1 73 6 65 74 6 2 73 6 66 74 6 3 73 6 67 74 76 6 3 73 25 0 49 11 48 1 73 25 0 49 12 48 1 74 25 0 49 5 6 2 24 1 3 2 0 48 1 73 25 0 49 5 6 2 24 1 3 2 0 19 1 48 1 74 25 0 49 5 6 3 24 1 3 2 0 48 1 73 25 0 49 5 6 3 24 1 3 2 0 19 1 48 1 74 76 15 12 -1

Compiling 'c0.se'...
Generating 'c0.txt' (similar to a .asm file)...
Generating 'c0.pic' (binary file in strings)...
Generating 'c0.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 44 bytes.
Here is a decimal dump:
44 43 0 0 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 99 74 6 48 74 76 6 65 74 6 35 74 76 6 65 74 6 35 74 76 15 12 -1

Compiling 'c1.se'...
Generating 'c1.txt' (similar to a .asm file)...
Generating 'c1.pic' (binary file in strings)...
Generating 'c1.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 62 bytes.
Here is a decimal dump:
62 43 0 0 0 0 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 99 74 6 49 74 76 6 42 74 6 48 74 6 1 75 6 35 74 6 35 73 76 6 42 74 6 0 73 6 1 75 6 35 74 6 35 73 76 15 12 -1

Compiling 'm0.se'...
Generating 'm0.txt' (similar to a .asm file)...
Generating 'm0.pic' (binary file in strings)...
Generating 'm0.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 99 bytes.
Here is a decimal dump:
99 43 0 3 0 0 25 0 49 6 6 1 24 1 2 1 0 6 3 3 1 25 0 49 5 25 0 49 6 6 1 24 1 2 1 0 48 1 3 1 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 109 74 6 48 74 76 6 3 73 6 1 73 6 3 73 76 25 0 49 6 6 1 24 1 2 1 0 48 1 73 6 1 73 25 0 49 5 48 1 73 76 15 12 -1

Compiling 'r0.se'...
Generating 'r0.txt' (similar to a .asm file)...
Generating 'r0.pic' (binary file in strings)...
Generating 'r0.bin' (binary file in bytes)  ...
The '.bin' file has a first byte containing the program of size = 62 bytes.
Here is a decimal dump:
62 43 0 2 0 0 25 0 49 5 6 1 6 2 3 2 6 84 74 6 101 74 6 115 74 6 116 74 6 32 74 6 114 74 6 48 74 76 6 49 74 6 50 74 76 25 0 49 5 48 1 73 25 0 49 6 48 1 73 76 15 12 -1

AUnit v1.0.9e.20201103
Copyright (C) Michel de Champlain 2006-2020.  All Right Reserved.

..............
14 tests OK
